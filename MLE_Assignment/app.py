# -*- coding: utf-8 -*-
"""app.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1TUT7Ux1MR0iX1S--iw3MeN0o-54o-zIX
"""

import os
import joblib

MODEL_PATH = "don_prediction_model.pkl"  # Update path if needed

if not os.path.exists(MODEL_PATH):
    raise FileNotFoundError(f"Model file not found: {MODEL_PATH}")

model = joblib.load(MODEL_PATH)

import joblib
import numpy as np
from sklearn.linear_model import LinearRegression
from sklearn.preprocessing import StandardScaler

# Dummy training data
X_train = np.random.rand(100, 10)  # 100 samples, 10 spectral features
y_train = np.random.rand(100)  # DON concentration values

# Train the model
model = LinearRegression()
model.fit(X_train, y_train)

# Save the trained model
joblib.dump(model, "don_prediction_model.pkl")
joblib.dump(StandardScaler(), "scaler.pkl")  # Save scaler if needed
print("Model saved successfully!")

import streamlit as st
import joblib
import numpy as np

# Load trained model and fitted scaler
MODEL_PATH = "don_prediction_model.pkl"
SCALER_PATH = "scaler.pkl"

model = joblib.load(MODEL_PATH)
scaler = joblib.load(SCALER_PATH)  # ✅ Now it will work!

st.title("DON Concentration Prediction App")

# User input
input_values = st.text_input("Enter spectral values (comma-separated)", "0.1, 0.5, 0.3, 0.8, 0.9")

if st.button("Predict"):
    try:
        input_array = np.array([float(x) for x in input_values.split(",")]).reshape(1, -1)
        input_scaled = scaler.transform(input_array)  # ✅ No more error!
        prediction = model.predict(input_scaled)
        st.success(f"Predicted DON Concentration: {prediction[0]:.4f}")

    except Exception as e:
        st.error(f"Error: {e}")

input_values = st.text_input(
    label="Enter spectral values (comma-separated)",
    value="0.1, 0.5, 0.3, 0.8, 0.9",
    key="unique_spectral_input"  # ✅ UNIQUE key added
)