# -*- coding: utf-8 -*-
"""app.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1TUT7Ux1MR0iX1S--iw3MeN0o-54o-zIX
"""

import os
import joblib
import numpy as np
import streamlit as st
from sklearn.preprocessing import StandardScaler
from sklearn.linear_model import LinearRegression

MODEL_PATH = "don_prediction_model.pkl"
SCALER_PATH = "scaler.pkl"

# Check if model and scaler exist, else create them
if not os.path.exists(MODEL_PATH) or not os.path.exists(SCALER_PATH):
    st.warning("Model or scaler not found. Training new model...")

    # Generate dummy training data
    X_train = np.random.rand(100, 10)  # 100 samples, 10 spectral features
    y_train = np.random.rand(100)  # Target values

    # Train the model
    model = LinearRegression()
    model.fit(X_train, y_train)

    # Fit and save the scaler
    scaler = StandardScaler()
    scaler.fit(X_train)  # ✅ Ensure it's fitted before saving

    # Save model and scaler
    joblib.dump(model, MODEL_PATH)
    joblib.dump(scaler, SCALER_PATH)
    st.success("New model and scaler trained and saved!")

# Load trained model and scaler
model = joblib.load(MODEL_PATH)
scaler = joblib.load(SCALER_PATH)

st.title("DON Concentration Prediction App")
st.write("Upload spectral data and get a DON prediction.")

# User input
input_values = st.text_input("Enter 10 spectral values (comma-separated)", "0.1, 0.5, 0.3, 0.8, 0.9, 0.2, 0.4, 0.6, 0.7, 0.3")

if st.button("Predict"):
    try:
        # Convert input to numpy array
        input_array = np.array([float(x) for x in input_values.split(",")]).reshape(1, -1)

        if input_array.shape[1] != 10:
            raise ValueError("Please enter exactly 10 values.")

        # Transform input using the fitted scaler
        input_scaled = scaler.transform(input_array)  # ✅ No more error!

        # Make prediction
        prediction = model.predict(input_scaled)
        st.success(f"Predicted DON Concentration: {prediction[0]:.4f}")

    except Exception as e:
        st.error(f"Error: {e}")